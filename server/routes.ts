import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { z } from "zod";
import { PDFDocument, StandardFonts, rgb } from "pdf-lib";

async function generatePDF(title: string, description: string, subject: string, category: string): Promise<Buffer> {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([595.28, 841.89]); // A4 size
  
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
  
  const { width, height } = page.getSize();
  const margin = 50;
  
  // Header
  page.drawText('EduHub - Educational Resource', {
    x: margin,
    y: height - 60,
    size: 20,
    font: boldFont,
    color: rgb(0.2, 0.2, 0.8),
  });
  
  // Title
  page.drawText(title, {
    x: margin,
    y: height - 120,
    size: 18,
    font: boldFont,
    color: rgb(0, 0, 0),
  });
  
  // Category and Subject
  page.drawText(`Category: ${category}`, {
    x: margin,
    y: height - 160,
    size: 12,
    font: font,
    color: rgb(0.3, 0.3, 0.3),
  });
  
  page.drawText(`Subject: ${subject}`, {
    x: margin,
    y: height - 180,
    size: 12,
    font: font,
    color: rgb(0.3, 0.3, 0.3),
  });
  
  // Description
  page.drawText('Description:', {
    x: margin,
    y: height - 220,
    size: 14,
    font: boldFont,
    color: rgb(0, 0, 0),
  });
  
  // Split description into lines to fit within page width
  const maxLineWidth = width - (margin * 2);
  const words = description.split(' ');
  let currentLine = '';
  let yPosition = height - 250;
  
  for (const word of words) {
    const testLine = currentLine + (currentLine ? ' ' : '') + word;
    const textWidth = font.widthOfTextAtSize(testLine, 12);
    
    if (textWidth < maxLineWidth) {
      currentLine = testLine;
    } else {
      if (currentLine) {
        page.drawText(currentLine, {
          x: margin,
          y: yPosition,
          size: 12,
          font: font,
          color: rgb(0, 0, 0),
        });
        yPosition -= 20;
      }
      currentLine = word;
    }
  }
  
  if (currentLine) {
    page.drawText(currentLine, {
      x: margin,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0),
    });
  }
  
  // Sample content
  page.drawText('Sample Educational Content', {
    x: margin,
    y: yPosition - 60,
    size: 16,
    font: boldFont,
    color: rgb(0, 0, 0),
  });
  
  const sampleContent = `
This is a sample educational resource from EduHub. In a real implementation, this would contain:

• Study materials and lecture notes
• Previous year questions with solutions
• Reference material and examples
• Practice problems and exercises
• Key concepts and formulas

For complete access to this resource, please visit EduHub platform.
Thank you for using EduHub!
  `;
  
  const contentLines = sampleContent.split('\n');
  yPosition -= 90;
  
  for (const line of contentLines) {
    if (yPosition < margin + 20) break; // Stop if we're near the bottom
    page.drawText(line, {
      x: margin,
      y: yPosition,
      size: 11,
      font: font,
      color: rgb(0, 0, 0),
    });
    yPosition -= 18;
  }
  
  // Footer
  page.drawText('Generated by EduHub Platform', {
    x: margin,
    y: 30,
    size: 10,
    font: font,
    color: rgb(0.5, 0.5, 0.5),
  });
  
  const pdfBytes = await pdfDoc.save();
  return Buffer.from(pdfBytes);
}

export async function registerRoutes(app: Express): Promise<Server> {
  // Get all resources with optional filters
  app.get("/api/resources", async (req, res) => {
    try {
      const { category, subject, semester, search, sortBy } = req.query;
      
      const resources = await storage.getResources({
        category: category as string,
        subject: subject as string,
        semester: semester as string,
        search: search as string,
        sortBy: sortBy as string,
      });
      
      res.json(resources);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch resources" });
    }
  });

  // Get featured resources
  app.get("/api/resources/featured", async (req, res) => {
    try {
      const resources = await storage.getFeaturedResources();
      res.json(resources);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch featured resources" });
    }
  });

  // Get resource stats
  app.get("/api/stats", async (req, res) => {
    try {
      const stats = await storage.getResourceStats();
      res.json(stats);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch stats" });
    }
  });

  // Get single resource
  app.get("/api/resources/:id", async (req, res) => {
    try {
      const id = req.params.id;
      const resource = await storage.getResource(id);
      
      if (!resource) {
        return res.status(404).json({ message: "Resource not found" });
      }
      
      res.json(resource);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch resource" });
    }
  });

  // Download resource (increment counter and return download URL)
  app.post("/api/resources/:id/download", async (req, res) => {
    try {
      const id = req.params.id;
      const resource = await storage.getResource(id);
      
      if (!resource) {
        return res.status(404).json({ message: "Resource not found" });
      }
      
      await storage.incrementDownloads(id);
      
      // In a real app, this would generate a secure download URL
      // For now, we'll return a mock PDF download response
      res.json({ 
        downloadUrl: `/api/download/${id}`,
        filename: `${resource.title}.pdf`,
        success: true 
      });
    } catch (error) {
      res.status(500).json({ message: "Failed to initiate download" });
    }
  });

  // PDF download endpoint
  app.get("/api/download/:id", async (req, res) => {
    try {
      const id = req.params.id;
      const resource = await storage.getResource(id);
      
      if (!resource) {
        return res.status(404).json({ message: "Resource not found" });
      }

      // Generate a proper PDF
      const pdfBuffer = await generatePDF(
        resource.title,
        resource.description,
        resource.subject,
        resource.category
      );
      
      // Set proper headers for PDF download
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="${resource.title.replace(/[^a-zA-Z0-9]/g, '_')}.pdf"`);
      res.setHeader('Content-Length', pdfBuffer.length);
      
      // Send the PDF buffer
      res.send(pdfBuffer);
    } catch (error) {
      console.error('PDF generation error:', error);
      res.status(500).json({ message: "Failed to generate PDF" });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}
